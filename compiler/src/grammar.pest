WHITESPACE = _{ " " | "\t" | "\n" | "\r" }

identifier = @{
    LETTER ~ (LETTER | NUMBER | "_")*
}

type_named = {identifier}
type_unit = {"()"}
type_array = { type_named ~ "[]" }

type_ = {
    type_unit
    | type_array
    | type_named
}

keyword_extern = @{"extern"}
keyword_export = @{"export"}

expression_literal_string = @{"\"" ~ (!"\"" ~ ANY)* ~ "\""}
expression_literal_integer = @{"-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*}

expression_literal = {
    expression_literal_string
    | expression_literal_integer
}

expression_function_call_arguments = _{ (expression ~ ("," ~ expression)* ~ ","?)? }

expression_call_target = {expression_field_access | expression_primary | expression_parenthesised}

expression_call = {
    expression_call_target ~ "(" ~ expression_function_call_arguments ~ ")"
}

expression_variable_reference = { 
    identifier 
}

expression_struct_constructor = {
    // TODO field initializers go between the curlies
    identifier ~ "{" ~ "}"
}

expression_field_access_target = {expression_primary | expression_parenthesised}

expression_field_access = {
    expression_field_access_target ~ "." ~ identifier
}

expression_primary = _{
    expression_struct_constructor
    | expression_variable_reference
    | expression_literal
}

expression_parenthesised = _{ "(" ~ expression ~ ")" }

expression = {
    expression_parenthesised
    | expression_call
    | expression_field_access
    | expression_primary
}

statement_let = {
    "let" ~ identifier ~ ":" ~ type_ ~ "=" ~ expression ~ ";"
}

statement_return = {
    "return" ~ expression ~ ";"
}

statement = { 
    (expression ~ ";") 
    | statement_let
    | statement_return
}

argument = { identifier ~ ":" ~ type_ }
argument_list = _{ argument ~ ("," ~ argument_list)? ~ ","? }

function_body_statements = {("{" ~ statement* ~ "}")}
function_body = { function_body_statements | keyword_extern ~ ";" }

function_declaration = {
    (keyword_export)? ~ "fn" ~ identifier ~ "(" ~ argument_list? ~ ")" ~ ":" ~ type_ ~ function_body
}

struct_field = {
    identifier ~ ":" ~ type_
}

struct_declaration = {
    (keyword_export)? ~ "struct" ~ identifier ~ "{" ~ (struct_field ~ ("," ~ struct_field)* ~ ","?)? ~ "}"
}

impl_declaration = {
    (keyword_export)? ~ "impl" ~ identifier ~ "{" ~ function_declaration* ~ "}"
}

declaration = {
    function_declaration
    | struct_declaration
    | impl_declaration
}

qualified_name = { identifier ~ ("::" ~ identifier)* }

import = {"import" ~ qualified_name ~ ("as" ~ identifier)? ~ ";"}

source_file = {
   SOI ~ import* ~ declaration* ~ EOI
}
